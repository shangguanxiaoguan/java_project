package objectorientedstudy.extenddemo;

public class TestApple {
    public static void main(String[] args) {
        Apple apple = new Apple();
        apple.show();
    }

    /**
     *   Java中使用变量的规则：
     *        遵循"就近原则"，局部位置有就使用
     *        没有就去本类的成员位置找，有就使用
     *        没有就去父类的成员位置找，有就使用，没有就报错
     *
     *      如果局部变量，本类的成员变量，父类的成员变量重名了，如何解决？
     *         直接写变量名：       局部变量
     *         this.成员变量名     本类的成员变量
     *         super.成员变量名    父类的成员变量
     *
     *
     *   查找变量的顺序：
     *      局部变量——》成员变量——》父类——》更高的父类..Object
     *
     *   访问父类变量的方式：
     *      super.父类变量名
     *
     *   super：
     *        当前对象父类的引用（父类内存空间的标识）
     *
     *   对象初始化顺序：
     *       先初始化父类内容，再初始化子类内容
     *
     *
     *   定义重名方法的前提：
     *          父类功能不能完全满足现实需求，扩展父类功能
     *          父类功能已过时，重新实现父类功能
     *
     *  方法重写：
     *     注意事项：父类私有方法无法重写
     *             子类方法访问权限不能小于父类方法
     *             子类不能比父类方法抛出更大的异常
     *
     *
     */


    /**
     *
     *  四大权限修饰符：
     *     private ：   强调的是给自己来使用
     *     默认 ：       强调的是给同包下的类来使用
     *     protected ： 强调的是给子类使用（不管子类在不在同一包下）
     *     public ：    强调的是给大家使用
    *
     * *
     */


    /**
     *
     *  方法重写和方法重载的区别：
     *      方法重载：                              方法重写：
     *      方法名：相同                              方法名：相同
     *      参数列表：不同（个数或对应位置类型）           参数列表：相同
     *      返回值类型：无关                           返回值类型：相同
     *      修饰符：无关                              修饰符：访问权限不小于被重写方法
     *      定义位置：同一个类                         定义位置：子父类中
     *
     *  方法重载：同一个类中出现两个或两个以上同名方法时，而这些方法的参数列表不同；与返回值的类型以及修饰符无关
     *
     *  方法重写：子类出现与父类相同的方法，要求返回值的类型必须相同
     *
     *
     */


    /**
     *
     * Java中继承的特点：
     *     1。Java只支持类的单继承，支持接口的多继承
     *     2。私有成员不能继承
     *     3。构造方法不能继承
     *     4。类与类之间的 " is a"关系
     *
     *
     */

}
